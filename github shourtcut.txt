#1. Register your account name on github.com
#2. download git to your windows desktop and get git bash ready(Linux has git available with its distribution"
#3. create RSA public key(use your own email address which you registered your account on github
ssh-keygen -t rsa -C emailname@email.com 
#4. update your pubic key file to github under your account settings
#https://github.com/settings/keys
#https://docs.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
#https://docs.github.com/en/github/authenticating-to-github/testing-your-ssh-connection
#5. test connectivity to github.com via ssh
ssh -T git@github.com
#if ok you will get below message:
#Hi username! You've successfully authenticated, but GitHub does not provide shell access.

#6. create your local directory to hold git repository as below:
mkdir git.rep
cd git.rep
git init
git config --global user.name "你的GitHub登陆名"
git config --global user.email "你的GitHub注册邮箱"
git clone https://github.com/robotframework/SSHLibrary

#7. 关联一个远程库命令，git@后面填写你的github repositor`
git remote add origin_http https://github.com/robotframework/SSHLibrary.git
git remote add origin git@github.com:userName/yourProject.git
git push origin master 

#8. commands
git branch
git status -uno
git remote -v
git add
git commit -a -m
git pull

git log
git reflog

git diff

git reset --hard HEAD^
git reset --hard HEAD^^
git reset --hard HEAD^^
git reset --hard HEAD~n
git reset --hard commit-id

#create branch:branch_name
git checkout -b branch_name

#check currently working branch
git branch

#switch to other branch: barnch_name
bit branch branch_name

#删除本地分支：
git branch -d branch_name

#删除服务器上的分支：
git push origin :name   (分支名前的冒号代表删除)

#github.com缺省分支名为main
git push <远程主机名> <本地分支名>:<远程分支名>
git push origin master:main
git push origin main:main


git merge src_branch dst_branch



git remote add origin git@github.com:userName/yourProject.git
git push -u origin master

#8.设置记住密码（默认15分钟）：
git config –global credential.helper cache
#9. 如果想自己设置时间，可以这样做：这样就设置一个小时之后失效
git config credential.helper ‘cache –timeout=3600’
#10. 长期存储密码：
git config –global credential.helper store


$ git remote  add origin_ssh git@github.com:git_user/git_rep.git
admin@DESKTOP-L1ORG9F MINGW64 /f/Git/git_rep (master)
$ git remote -v
origin  https://github.com/git_user/git_rep.git (fetch)
origin  https://github.com/git_user/git_rep.git (push)
origin_ssh      git@github.com:git_user/git_rep.git (fetch)
origin_ssh      git@github.com:git_user/git_rep.git (push)
admin@DESKTOP-L1ORG9F MINGW64 /f/Git/git_rep (master)
$ git push origin_ssh master
The authenticity of host 'github.com (192.30.253.112)' can't be established.
RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.
Are you sure you want to continue connecting (yes/no)? y
Please type 'yes' or 'no': yes
Warning: Permanently added 'github.com,192.30.253.112' (RSA) to the list of known hosts.
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 12 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 276 bytes | 276.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To github.com:git_user/git_rep.git

简单的代码提交流程
git status 查看工作区代码相对于暂存区的差别
git add . 将当前目录下修改的所有代码从工作区添加到暂存区 . 代表当前目录
git commit -m ‘注释’ 将缓存区内容添加到本地仓库
git pull origin master先将远程仓库master中的信息同步到本地仓库master中
git push origin master 将本地版本库推送到远程服务器，
origin是远程主机，master表示是远程服务器上的master分支和本地分支重名的简写，分支名是可以修改的
Git add
git add [参数] <路径>　作用就是将我们需要提交的代码从工作区添加到暂存区，就是告诉git系统，我们要提交哪些文件，之后就可以使用git commit命令进行提交了。
 为了方便下面都用 . 来标识路径， . 表示当前目录，路径可以修改，下列操作的作用范围都在版本库之内。

git add .
不加参数默认为将修改操作的文件和未跟踪新添加的文件添加到git系统的暂存区，注意不包括删除
git add -u .
-u 表示将已跟踪文件中的修改和删除的文件添加到暂存区，不包括新增加的文件，注意这些被删除的文件被加入到暂存区再被提交并推送到服务器的版本库之后这个文件就会从git系统中消失了。
git add -A .
-A 表示将所有的已跟踪的文件的修改与删除和新增的未跟踪的文件都添加到暂存区。
Git commit
git commit 主要是将暂存区里的改动给提交到本地的版本库。每次使用git commit 命令我们都会在本地版本库生成一个40位的哈希值，这个哈希值也叫commit-id，
 commit-id 在版本回退的时候是非常有用的，它相当于一个快照,可以在未来的任何时候通过与git reset的组合命令回到这里.

git commit -m ‘message’
-m 参数表示可以直接输入后面的“message”，如果不加 -m参数，那么是不能直接输入message的，而是会调用一个编辑器一般是vim来让你输入这个message，
message即是我们用来简要说明这次提交的语句。
git commit -am ‘message’ -am等同于-a -m
-a参数可以将所有已跟踪文件中的执行修改或删除操作的文件都提交到本地仓库，即使它们没有经过git add添加到暂存区，
注意: 新加的文件（即没有被git系统管理的文件）是不能被提交到本地仓库的。
Git push
在使用git commit命令将修改从暂存区提交到本地版本库后，只剩下最后一步将本地版本库的分支推送到远程服务器上对应的分支了，如果不清楚版本库的构成，可以查看我的另一篇，git 仓库的基本结构。
 git push的一般形式为 git push <远程主机名> <本地分支名> <远程分支名> ，例如 git push origin master：refs/for/master ，即是将本地的master分支推送到远程主机origin上的对应master分支， origin 是远程主机名。第一个master是本地分支名，第二个master是远程分支名。

git push origin master
如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建
git push origin ：refs/for/master
如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin –delete master
git push origin
如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支
git push
如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名
关于 refs/for：
refs/for 的意义在于我们提交代码到服务器之后是需要经过code review 之后才能进行merge的，而refs/heads 不需要

